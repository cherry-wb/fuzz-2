# This file contains basic Makefile includes that contain all building
# instructions for all binaries and packages.
FUZZBOT = @FUZZBOTDIR@
CURRENT_DIR = $(shell pwd)

.PHONY: all build-directories build-objects build-xpts build-libraries build-executables clean clean-objects clean-libraries $(ALL_EXECUTABLES)

all: build-directories build-xpts build-objects build-libraries build-executables

# Variables
CXX = @CXX@
XPIDL = @XPIDL@
CXX_FLAGS = -Wall -fPIC -g
AR_FLAGS = cr

LIB_DIR = $(FUZZBOT)/libs
INCLUDES = -I build \
           -I @XULRUNNER_INCLUDE_DIRECTORY@ \
           -I @XULRUNNER_INCLUDE_DIRECTORY@/java \
           -I @XULRUNNER_INCLUDE_DIRECTORY@/plugin \
           -I @XULRUNNER_INCLUDE_DIRECTORY@/xpcom \
           -I @XULRUNNER_INCLUDE_DIRECTORY@/string \
           -I @TIDY_INCLUDE_DIRECTORY@ \
           -I @RDFA_INCLUDE_DIRECTORY@ \
           -I @EXPAT_INCLUDE_DIRECTORY@ 
LDFLAGS =
AR = @AR@
OS = @OS@

ifeq (@OS@,mingw32)
#CXX_FLAGS = -Wall -g -DXP_WIN=1 -D_WINDOWS=1 -D_WIN32=1 -DWIN32=1 -DXP_WIN32=1 -DHW_THREADS=1 -DWINVER=0x400 -D_WIN32_WINNT=0x400 -DSTDC_HEADERS=1 -DWIN32_LEAN_AND_MEAN=1
CXX_FLAGS = -Wall -g -DHAVE_CPP_MODERN_SPECIALIZE_TEMPLATE_SYNTAX -include "mozilla-config.h"
LDFLAGS = @RDFA_LIB_DIRECTORY@/rdfa.lib @EXPAT_LIB_DIRECTORY@/libexpat.a @TIDY_LIB_DIRECTORY@/tidy.lib @XULRUNNER_LIB_DIRECTORY@/xpcomglue_s.lib @XULRUNNER_LIB_DIRECTORY@/xpcom.lib @XULRUNNER_LIB_DIRECTORY@/nspr4.lib

INCLUDES += -I @XULRUNNER_INCLUDE_DIRECTORY@
XULIDL_INCLUDES= -I @XULRUNNER_IDL_DIRECTORY@
endif

ifeq (@OS@,linux-gnu)
CXX_FLAGS = -Wall -g -DMOZILLA_STRICT_API -DXP_UNIX -include "mozilla-config.h"
LDFLAGS = -L @XULRUNNER_LIB_DIRECTORY@ -lxpcom -lplds4 -lplc4 -lnspr4 -lpthread -ldl @RDFA_LIB_DIRECTORY@/librdfa.a @EXPAT_LIB_DIRECTORY@/libexpat.a @TIDY_LIB_DIRECTORY@/libtidy.a
INCLUDES += -I /usr/include/nspr -I /usr/include
XULIDL_INCLUDES= -I /usr/share/idl/xulrunner
endif

BUILD_DIR = build
DIST_DIR = dist
DEPENDENCIES := $(patsubst %.cpp,$(BUILD_DIR)/%.P, $(SOURCES))
OBJECTS := $(patsubst %.cpp,$(BUILD_DIR)/%.o, $(SOURCES))
OBJECTS += $(patsubst %,$(BUILD_DIR)/%.o, $(EXECUTABLES))
LIBDEPS := $(DYNAMIC_LINK_LIBRARIES)

# All variables
ALL_SOURCES := $(patsubst %.cpp,$(BUILD_DIR)/%.cpp, $(SOURCES))
ALL_SOURCES += $(patsubst %.idl,$(BUILD_DIR)/%.idl, $(IDL_SOURCES))
ALL_SOURCES += $(patsubst %,$(BUILD_DIR)/%.cpp, $(EXECUTABLES))
ALL_GENERATED_HEADERS := $(patsubst %.idl,$(BUILD_DIR)/%.h, $(IDL_SOURCES))
ALL_XPTS := $(patsubst %.idl,$(DIST_DIR)/%.xpt, $(IDL_SOURCES))
ALL_DEPENDENCIES += $(DEPENDENCIES)
ALL_OBJECTS += $(OBJECTS)

ifeq ($(OS),mingw32)
ALL_LIBRARIES := $(patsubst %,$(DIST_DIR)/%.lib, $(LIBRARIES))
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/%.dll, $(COMPONENT_LIBRARIES))
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/%.dll, $(LIBRARIES))
else 
ALL_LIBRARIES := $(patsubst %,$(DIST_DIR)/lib%.so, $(LIBRARIES))
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/%.so, $(COMPONENT_LIBRARIES))
ALL_LIBRARIES += $(patsubst %,$(DIST_DIR)/lib%.a, $(LIBRARIES))
endif

ifeq ($(OS),mingw32)
LIBDEPS := $(DYNAMIC_WINDOWS_LIBRARIES)
ALL_EXECUTABLES := $(patsubst %,$(DIST_DIR)/%.exe, $(EXECUTABLES))
else
LIBDEPS := $(DYNAMIC_LINUX_LIBRARIES)
ALL_EXECUTABLES := $(patsubst %,$(DIST_DIR)/%, $(EXECUTABLES))
endif

ALL_DIRECTORIES += $(BUILD_DIR) $(DIST_DIR)
ifndef MAKE_CLEAN_ACTIVE
-include $(ALL_DEPENDENCIES)
endif

$(ALL_DIRECTORIES):
	mkdir -p $@

$(ALL_SOURCES):
	@mkdir -p $(dir $@)
	@ln -sf $(subst $(BUILD_DIR)/,$(CURRENT_DIR)/,$@) $@

%.o %.P: %.cpp $(ALL_GENERATED_HEADERS)
	@echo "Building $(basename $@).o..."
	$(CXX) $(CXX_FLAGS) -c -MD -o $(basename $@).o $(INCLUDES) -I. $<
	@cp $(basename $@).d $(basename $@).P; \
		sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $(basename $@).d >> $(basename $@).P; \
		rm -f $(basename $@).d

dist/%.so: $(OBJECTS)
	@echo "Building $@..."
	$(CXX) -shared -o $@ $(OBJECTS) $(LDFLAGS) $(DYNAMIC_LINK_LIBRARIES:%=-l%)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.dll: $(OBJECTS)
	@echo "Building $@..."
	$(CXX) --shared --export-all --output-def,$(@:.dll=.def),--out-implib,$(@:.dll=.lib) -o $@ $^ $(DYNAMIC_LINK_LIBRARIES:%=-l%) $(LDFLAGS)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.h: %.idl
	@echo "Building $@..."
	$(XPIDL) -m header $(XULIDL_INCLUDES)  -o $(basename $@) $<

dist/%.xpt: %.idl
	@echo "Building $@..."
	$(XPIDL) -m typelib $(XULIDL_INCLUDES) -o $(basename $@) $<

%.lib: $(OBJECTS)
	@echo "Building $@..."
	@$(AR) $(AR_FLAGS) $@ $(OBJECTS)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

%.a: $(OBJECTS)
	@echo "Building $@..."
	@$(AR) $(AR_FLAGS) $@ $(OBJECTS)
	@mkdir -p $(LIB_DIR)
	@ln -sf $(CURRENT_DIR)/$@ $(LIB_DIR)/$(@F)

ifdef EXECUTABLES
ifeq ($(OS),mingw32)
$(STATIC_WINDOWS_LIBRARIES):
	# This is a fake target to override the default .lib build
$(ALL_EXECUTABLES): $(ALL_SOURCES) $(ALL_OBJECTS)
	@echo "Building $(@F)..."
	@$(CXX) $(CXX_FLAGS) $(LDFLAGS) -o $@ $(BUILD_DIR)/$(basename $(@F)).o $(DYNAMIC_LINK_LIBRARIES:%=-l%) $(DYNAMIC_WINDOWS_LIBRARIES:%=-l%)
else
#$(STATIC_LINUX_LIBRARIES):
#	# This is a fake target to override the default .a build
$(ALL_EXECUTABLES): $(ALL_SOURCES) $(ALL_OBJECTS) 
	@echo "Building $(@F)..."
	@$(CXX) $(CXX_FLAGS) $(LDFLAGS) -o $@ $(BUILD_DIR)/$(@F).o $(DYNAMIC_LINK_LIBRARIES:%=-l%) $(DYNAMIC_UNIX_LIBRARIES:%=-l%)
endif
endif

build-xpts: $(ALL_DIRECTORIES) $(ALL_GENERATED_HEADERS) $(ALL_XPTS)

build-objects: $(ALL_DIRECTORIES) $(ALL_SOURCES) $(ALL_DEPENDENCIES) $(ALL_OBJECTS)

build-libraries: $(ALL_DIRECTORIES) $(ALL_LIBRARIES)

build-executables: $(ALL_DIRECTORIES) $(ALL_EXECUTABLES)

clean: clean-libraries clean-objects

clean-objects:
	@rm -rf $(BUILD_DIR)

clean-libraries:
	@rm -rf $(DIST_DIR)

vars:
	@echo OS: $(OS)
	@echo ALL_SOURCES: $(ALL_SOURCES)
	@echo ALL_DEPENDENCIES: $(ALL_DEPENDENCIES)
	@echo ALL_OBJECTS: $(ALL_OBJECTS)
	@echo ALL_LIBRARIES: $(ALL_LIBRARIES)
	@echo ALL_EXECUTABLES: $(ALL_EXECUTABLES)
	@echo ALL_DIRECTORIES: $(ALL_DIRECTORIES)
	@echo ALL_LIBRARIES: $(ALL_LIBRARIES)
